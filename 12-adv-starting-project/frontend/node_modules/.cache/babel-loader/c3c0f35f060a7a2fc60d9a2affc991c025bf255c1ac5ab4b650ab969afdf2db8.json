{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97508\\\\OneDrive\\\\Documents\\\\GitHub\\\\Joidea_Intern\\\\12-adv-starting-project\\\\frontend\\\\src\\\\App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport RootLayout from \"./Pages/Root\";\nimport HomePage from \"./Pages/HomePage\";\nimport EventsPage, { loader as eventsLoader } from \"./Pages/Events\";\nimport EventDetailPage, { loader as eventsDetailLoader, action as deleteEventAction } from \"./Pages/EventDetailPage\";\nimport NewEventPage from \"./Pages/NewEventPage\";\nimport EditEventPage from \"./Pages/EditEventPage\";\nimport EventsRootLayout from \"./Pages/EventRoot\";\nimport ErrorPage from \"./Pages/Error\";\nimport { action as manipulateEventAction } from \"./components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  //首页\n  path: \"/\",\n  //基本外观\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 14\n  }, this),\n  //错误页面\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 19\n  }, this),\n  //子路由\n  children: [\n  //index：true，表示是当前路由下的首页，element就是路由导向的页面\n  {\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: \"events\",\n    element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 18\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 22\n      }, this),\n      //页面刚加载时，需要加载的数据函数\n      loader: eventsLoader\n    }, {\n      path: \"new\",\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 22\n      }, this),\n      //页面刚加载时，需要加载的action函数，一些操作，比如http请求等\n      action: manipulateEventAction\n    }, {\n      path: \":eventId\",\n      //路径标识符\n      id: \"event-detail\",\n      loader: eventsDetailLoader,\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 26\n        }, this),\n        action: deleteEventAction\n      }, {\n        path: \"edit\",\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 26\n        }, this),\n        action: manipulateEventAction\n      }]\n    }]\n  }]\n}]);\nfunction App() {\n  //使用router，传入上面配置好的路由参数\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","RootLayout","HomePage","EventsPage","loader","eventsLoader","EventDetailPage","eventsDetailLoader","action","deleteEventAction","NewEventPage","EditEventPage","EventsRootLayout","ErrorPage","manipulateEventAction","router","path","element","errorElement","children","index","id","App"],"sources":["C:/Users/97508/OneDrive/Documents/GitHub/Joidea_Intern/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\r\n\r\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\r\n//    - HomePage\r\n//    - EventsPage\r\n//    - EventDetailPage\r\n//    - NewEventPage\r\n//    - EditEventPage\r\n// 2. Add routing & route definitions for these five pages\r\n//    - / => HomePage\r\n//    - /events => EventsPage\r\n//    - /events/<some-id> => EventDetailPage\r\n//    - /events/new => NewEventPage\r\n//    - /events/<some-id>/edit => EditEventPage\r\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\r\n// 4. Add properly working links to the MainNavigation\r\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\r\n// 6. Output a list of dummy events to the EventsPage\r\n//    Every list item should include a link to the respective EventDetailPage\r\n// 7. Output the ID of the selected event on the EventDetailPage\r\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\r\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\r\n\r\nimport RootLayout from \"./Pages/Root\";\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport EventsPage, { loader as eventsLoader } from \"./Pages/Events\";\r\nimport EventDetailPage, {\r\n  loader as eventsDetailLoader,\r\n  action as deleteEventAction,\r\n} from \"./Pages/EventDetailPage\";\r\nimport NewEventPage from \"./Pages/NewEventPage\";\r\nimport EditEventPage from \"./Pages/EditEventPage\";\r\nimport EventsRootLayout from \"./Pages/EventRoot\";\r\nimport ErrorPage from \"./Pages/Error\";\r\nimport { action as manipulateEventAction } from \"./components/EventForm\";\r\n\r\nconst router = createBrowserRouter([\r\n  {\r\n    //首页\r\n    path: \"/\",\r\n    //基本外观\r\n    element: <RootLayout />,\r\n    //错误页面\r\n    errorElement: <ErrorPage />,\r\n    //子路由\r\n    children: [\r\n      //index：true，表示是当前路由下的首页，element就是路由导向的页面\r\n      { index: true, element: <HomePage /> },\r\n      {\r\n        path: \"events\",\r\n        element: <EventsRootLayout />,\r\n        children: [\r\n          {\r\n            index: true,\r\n            element: <EventsPage />,\r\n            //页面刚加载时，需要加载的数据函数\r\n            loader: eventsLoader,\r\n          },\r\n          {\r\n            path: \"new\",\r\n            element: <NewEventPage />,\r\n            //页面刚加载时，需要加载的action函数，一些操作，比如http请求等\r\n            action: manipulateEventAction,\r\n          },\r\n          {\r\n            path: \":eventId\",\r\n            //路径标识符\r\n            id: \"event-detail\",\r\n            loader: eventsDetailLoader,\r\n            children: [\r\n              {\r\n                index: true,\r\n                element: <EventDetailPage />,\r\n                action: deleteEventAction,\r\n              },\r\n              {\r\n                path: \"edit\",\r\n                element: <EditEventPage />,\r\n                action: manipulateEventAction,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n]);\r\n\r\nfunction App() {\r\n  //使用router，传入上面配置好的路由参数\r\n  return <RouterProvider router={router} />;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AAEtE,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,IAAIC,MAAM,IAAIC,YAAY,QAAQ,gBAAgB;AACnE,OAAOC,eAAe,IACpBF,MAAM,IAAIG,kBAAkB,EAC5BC,MAAM,IAAIC,iBAAiB,QACtB,yBAAyB;AAChC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,gBAAgB,MAAM,mBAAmB;AAChD,OAAOC,SAAS,MAAM,eAAe;AACrC,SAASL,MAAM,IAAIM,qBAAqB,QAAQ,wBAAwB;AAAC;AAEzE,MAAMC,MAAM,GAAGhB,mBAAmB,CAAC,CACjC;EACE;EACAiB,IAAI,EAAE,GAAG;EACT;EACAC,OAAO,eAAE,QAAC,UAAU;IAAA;IAAA;IAAA;EAAA,QAAG;EACvB;EACAC,YAAY,eAAE,QAAC,SAAS;IAAA;IAAA;IAAA;EAAA,QAAG;EAC3B;EACAC,QAAQ,EAAE;EACR;EACA;IAAEC,KAAK,EAAE,IAAI;IAAEH,OAAO,eAAE,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA;EAAI,CAAC,EACtC;IACED,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAE,QAAC,gBAAgB;MAAA;MAAA;MAAA;IAAA,QAAG;IAC7BE,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MACXH,OAAO,eAAE,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAG;MACvB;MACAb,MAAM,EAAEC;IACV,CAAC,EACD;MACEW,IAAI,EAAE,KAAK;MACXC,OAAO,eAAE,QAAC,YAAY;QAAA;QAAA;QAAA;MAAA,QAAG;MACzB;MACAT,MAAM,EAAEM;IACV,CAAC,EACD;MACEE,IAAI,EAAE,UAAU;MAChB;MACAK,EAAE,EAAE,cAAc;MAClBjB,MAAM,EAAEG,kBAAkB;MAC1BY,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,IAAI;QACXH,OAAO,eAAE,QAAC,eAAe;UAAA;UAAA;UAAA;QAAA,QAAG;QAC5BT,MAAM,EAAEC;MACV,CAAC,EACD;QACEO,IAAI,EAAE,MAAM;QACZC,OAAO,eAAE,QAAC,aAAa;UAAA;UAAA;UAAA;QAAA,QAAG;QAC1BT,MAAM,EAAEM;MACV,CAAC;IAEL,CAAC;EAEL,CAAC;AAEL,CAAC,CACF,CAAC;AAEF,SAASQ,GAAG,GAAG;EACb;EACA,oBAAO,QAAC,cAAc;IAAC,MAAM,EAAEP;EAAO;IAAA;IAAA;IAAA;EAAA,QAAG;AAC3C;AAAC,KAHQO,GAAG;AAKZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}