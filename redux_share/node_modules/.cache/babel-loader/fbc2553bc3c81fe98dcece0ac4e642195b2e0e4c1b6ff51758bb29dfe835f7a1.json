{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false\n  },\n  reducers: {\n    //可以直接修改state函数，因为@redux/toolkit使用了immer插件，正常的reducer必须返回新的state\n    replaceCart(state, action) {\n      //接收到的action是个对象类型，其中payload包含传入的参数\n      state.items = action.payload.items;\n      state.totalQuantity = action.payload.totalQuantity;\n    },\n    addItemToCart(state, action) {\n      //除了初次replce cart之外，state有改变，所以要发送数据请求\n      state.changed = true;\n      const newItem = action.payload;\n      //查找存在的物品\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      //如果不存在，向state.item数组增加新的items，格式要对应\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          title: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        //如果存在，只增加数量和总价\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      state.changed = true;\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      //如果只有一个物品，直接移除\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        //如果>1，数量-1，总价减去当前物品价格\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItemFromCart","filter","cartActions","actions"],"sources":["C:/Users/97508/OneDrive/Documents/GitHub/Joidea_Intern/redux_share/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    changed: false,\r\n  },\r\n  reducers: {\r\n    //可以直接修改state函数，因为@redux/toolkit使用了immer插件，正常的reducer必须返回新的state\r\n    replaceCart(state, action) {\r\n      //接收到的action是个对象类型，其中payload包含传入的参数\r\n      state.items = action.payload.items;\r\n      state.totalQuantity = action.payload.totalQuantity;\r\n    },\r\n    addItemToCart(state, action) {\r\n      //除了初次replce cart之外，state有改变，所以要发送数据请求\r\n      state.changed = true;\r\n      const newItem = action.payload;\r\n      //查找存在的物品\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      //如果不存在，向state.item数组增加新的items，格式要对应\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          title: newItem.title,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        //如果存在，只增加数量和总价\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      state.changed = true;\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      //如果只有一个物品，直接移除\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        //如果>1，数量-1，总价减去当前物品价格\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE,CAAC;IAChBC,OAAO,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,WAAW,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzB;MACAD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO,CAACP,KAAK;MAClCK,KAAK,CAACJ,aAAa,GAAGK,MAAM,CAACC,OAAO,CAACN,aAAa;IACpD,CAAC;IACDO,aAAa,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC3B;MACAD,KAAK,CAACH,OAAO,GAAG,IAAI;MACpB,MAAMO,OAAO,GAAGH,MAAM,CAACC,OAAO;MAC9B;MACA,MAAMG,YAAY,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MACvER,KAAK,CAACJ,aAAa,EAAE;MACrB;MACA,IAAI,CAACS,YAAY,EAAE;QACjBL,KAAK,CAACL,KAAK,CAACc,IAAI,CAAC;UACfD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UACdE,KAAK,EAAEN,OAAO,CAACM,KAAK;UACpBC,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAET,OAAO,CAACO,KAAK;UACzBlB,IAAI,EAAEW,OAAO,CAACM;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAL,YAAY,CAACO,QAAQ,EAAE;QACvBP,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACM,KAAK;MACxE;IACF,CAAC;IACDG,kBAAkB,CAACd,KAAK,EAAEC,MAAM,EAAE;MAChCD,KAAK,CAACH,OAAO,GAAG,IAAI;MACpB,MAAMW,EAAE,GAAGP,MAAM,CAACC,OAAO;MACzB,MAAMG,YAAY,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC/DR,KAAK,CAACJ,aAAa,EAAE;MACrB;MACA,IAAIS,YAAY,CAACO,QAAQ,KAAK,CAAC,EAAE;QAC/BZ,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACoB,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACL;QACAH,YAAY,CAACO,QAAQ,EAAE;QACvBP,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACM,KAAK;MACxE;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMK,WAAW,GAAGxB,SAAS,CAACyB,OAAO;AAE5C,eAAezB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}